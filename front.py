# -*- coding: utf-8 -*-
"""front.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FWJRKEqg2bviqI2xYX0TeH3K9iorJsAp
"""

# ===========================================
# Colab用 フロントUI（枠のみ・ダミー進捗つき）
# 画像で示されたワイヤーフレームを Gradio で再現
# ===========================================


import gradio as gr
import pandas as pd
import time

# ------- 見た目（CSS） -------
CSS = """
.gradio-container {max-width: 1280px !important;}
.topbar {
  padding: 10px 14px; font-weight: 700; font-size: 1.05rem;
  border-radius: 12px; background: rgba(148,163,184,.12); border: 1px solid rgba(148,163,184,.35);
}
.card { border: 2px dashed #94a3b8; border-radius: 14px; padding: 12px; background: rgba(148,163,184,.06); }
.card .title { font-weight: 700; margin: 4px 0 10px; }
.placeholder { min-height: 120px; display:flex; align-items:center; justify-content:center; color:#64748b; }
.bigbox { min-height: 260px; }
.matrix { min-height: 220px; }
.badge { display:inline-block; padding:2px 8px; border-radius:999px; font-size:.85rem; background:#e2e8f0; color:#475569; }
"""

# ------- ダミー表示（AIが動いている風） -------
def simulate():
    steps = [
        "KPI候補を抽出中…",
        "因果グラフの素案を構築中…",
        "統計データをスキャン中…",
        "数理最適化の設定を組み立て中…",
        "完了（ダミー）"
    ]
    for i, msg in enumerate(steps, 1):
        pill = f"🧠 {msg} ({i}/{len(steps)})"
        yield pill, pill, pill, pill
        time.sleep(0.6)

def reset():
    return "—", "—", "—", "—"

# ------- プレースホルダーデータ -------
policies = [f"政策 {c}" for c in list("ABCD")]
kpis     = [f"KPI{i}" for i in range(1,5)]
matrix_df = pd.DataFrame("", index=policies, columns=kpis)

# More realistic dummy data
kpi_data = {
    "KPI名": [
        "医師の平均労働時間",
        "医師数",
        "社会保障費",
        "地方/東京の医師比",
        "病院満足度",
        "医師の離職率",
        "初期研修医師数",
        "治療による経済損失の回避"
    ],
    "定義（任意）": [
        "医師1人あたり週平均の就労時間（臨床・非臨床含む）",
        "地域内の常勤換算の医師数",
        "一般会計歳出に占める社会保障関係費",
        "人口1万対医師数（地方）/ 同（東京）の比",
        "患者アンケート5段階評価の平均",
        "年内離職医師数 / 在籍医師数",
        "地域内の初期研修医の人数",
        "疾患負担・生産性損失の回避額の推計"
    ],
    "単位": [
        "時間/週",
        "人",
        "兆円/年",
        "比",
        "点（1–5）",
        "%",
        "人",
        "億円/年"
    ],
    "出典/根拠": [
        "勤務実態調査等",
        "医師・歯科医師・薬剤師統計",
        "財政資料",
        "人口動態/医師統計",
        "患者満足度調査",
        "人事・届出情報",
        "臨床研修マッチング",
        "推計モデル"
    ]
}

kpi_df = pd.DataFrame(kpi_data)

empty_table = pd.DataFrame(kpi_data)


# 医療KPI向けダミー統計データ（3列構成）
# ---- 医療用の元になる統計データ（KPI導出に使う客観指標） ----
stats_data = {
    "指標": [
        "週平均労働時間（医師, 時間/週）",        # → KPI: 医師の平均労働時間
        "医師数（常勤換算FTE, 人）",               # → KPI: 医師数
        "社会保障関係費（兆円/年）",                # → KPI: 社会保障費
        "人口10万対医師数（地方, 人）",             # → KPI: 地方/東京の医師比（地方側）
        "人口10万対医師数（東京, 人）",             # → KPI: 地方/東京の医師比（東京側）
        "入院患者満足度平均（1–5点）",             # → KPI: 病院満足度
        "期首在籍医師数（人）",                     # → KPI: 医師の離職率 分母
        "年内離職医師数（人）",                     # → KPI: 医師の離職率 分子
        "初期研修医採用数（人）",                   # → KPI: 初期研修医師数
        "主要疾患の患者数（人）",                    # → 回避損失の基礎
        "平均賃金（日額, 円）",                      # → 回避損失の基礎
        "1人あたり就労損失日数（治療前, 日）",       # → 回避損失の基礎
        "1人あたり就労損失日数（治療後, 日）",       # → 回避損失の基礎
        "推定回避損失額（億円/年）"                 # = (治療前-治療後)*平均賃金*患者数 / 1e8
    ],
    "年": [
        2022, 2022, 2022, 2022, 2022, 2022,
        2022, 2022, 2022, 2022, 2022, 2022,
        2022, 2022
    ],
    "値": [
        52.0,          # 週平均労働時間（ダミー）
        340000,        # 医師FTE数（ダミー）
        130.5,         # 兆円/年（ダミー）
        210.0,         # 人/10万（地方, ダミー）
        320.0,         # 人/10万（東京, ダミー）
        4.1,           # 満足度（ダミー）
        340000,        # 期首在籍（ダミー）
        12000,         # 離職数（ダミー）
        9000,          # 初期研修医採用（ダミー）
        2000000,       # 主要疾患患者数（ダミー）
        16000,         # 円/日（ダミー）
        10.0,          # 日（治療前, ダミー）
        7.0,           # 日（治療後, ダミー）
        960.0          # 億円/年（例: (10-7)*16000*2,000,000 / 1e8 = 960）
    ],
    "出典": [
        "勤務実態調査等（例）",
        "医師・歯科医師・薬剤師統計（例）",
        "社会保障関係費・国民医療費（例）",
        "地域医療統計/医師偏在指標（例）",
        "地域医療統計/医師偏在指標（例）",
        "患者体験・満足度調査（例）",
        "人事・届出情報（例）",
        "人事・届出情報（例）",
        "臨床研修マッチング（例）",
        "患者調査・疾病統計（例）",
        "賃金構造基本統計調査（例）",
        "COI/疫学推計（例）",
        "COI/疫学推計（例）",
        "上記の合成推計（例）"
    ]
}
stats_df = pd.DataFrame(stats_data)



opt_data = {
    "政策組合せ": ["政策Aのみ", "政策Bのみ", "政策A + C", "政策B + D", "政策A + B + C + D", "政策Cのみ"],
    "目的関数値": [85, 78, 92, 88, 70, 65],
    "制約メモ": ["コスト上限内", "コスト上限内", "コスト上限超過（要検討）", "時間制約あり", "リソース不足", "特に制約なし"]
}
opt_df = pd.DataFrame(opt_data)


# ------- UI 構築 -------
with gr.Blocks(css=CSS, title="政策評価UI（枠のみ）") as demo:
    gr.HTML('<div class="topbar">政策評価ワークスペース（枠のみ / ダミー挙動）</div>')

    with gr.Row():
        # ===== 左カラム =====
        with gr.Column(scale=7, min_width=640):
            # 政策（テキスト）
            with gr.Group(elem_classes="card"):
                gr.Markdown("### 政策（テキスト）", elem_classes="title")
                policy_txt = gr.Textbox(placeholder="ここに政策テキストを貼り付け", lines=6)

            # PDF と レビューシート（別枠）
            with gr.Row():
                with gr.Column():
                    with gr.Group(elem_classes="card"):
                        gr.Markdown("### PDF 資料", elem_classes="title")
                        pdf_upl = gr.File(label="PDFをアップロード（複数可）",
                                          file_count="multiple", file_types=[".pdf"])
                with gr.Column():
                    with gr.Group(elem_classes="card"):
                        gr.Markdown("### レビューシート", elem_classes="title")
                        rev_upl = gr.File(label="レビューシート（CSV/Excel/PDF など）",
                                          file_count="multiple",
                                          file_types=[".csv", ".xlsx", ".xls", ".pdf"])

            # KPIの一覧（枠だけ）
            with gr.Group(elem_classes="card"):
                gr.Markdown("### KPI の一覧", elem_classes="title")
                kpi_status = gr.Markdown("—", elem_classes="badge")
                kpi_table  = gr.Dataframe(value=empty_table, interactive=False)

            # 数値的な予測（政策 × KPI のマトリクス・枠だけ）
            with gr.Group(elem_classes="card"):
                gr.Markdown("### 数値的な予測（政策 × KPI）", elem_classes="title")
                gr.Markdown("（行：政策A/B/C…　列：KPI1/2/3…　— 値は空のまま）", elem_classes="badge")
                mat = gr.Dataframe(value=matrix_df, interactive=False, elem_classes="matrix")

            # 非数値的な予測（論点リストの空間）
            with gr.Group(elem_classes="card"):
                gr.Markdown("### 非数値的な予測（論点の一覧）", elem_classes="title")
                nonnum = gr.Textbox(
                    value="・（ここに論点が並ぶ）\n・（例：制度設計上の留意点、倫理・公平性、導入時のボトルネック など）",
                    lines=6, interactive=False
                )

        # ===== 右カラム =====
        with gr.Column(scale=5, min_width=420):
            # 因果グラフ（箱だけ）
            with gr.Group(elem_classes="card"):
                gr.Markdown("### 因果グラフ", elem_classes="title")
                cg_status = gr.Markdown("—", elem_classes="badge")
                gr.HTML('<div class="placeholder bigbox">（ここに因果グラフが描画される想定）</div>')

            # 元になる統計データ（枠）
            with gr.Group(elem_classes="card"):
                gr.Markdown("### 元になる統計データ", elem_classes="title")
                data_status = gr.Markdown("—", elem_classes="badge")
                stats_tbl = gr.Dataframe(value=stats_df, interactive=False)

            # 数理最適化した結果（枠）
            with gr.Group(elem_classes="card"):
                gr.Markdown("### 数理最適化した結果", elem_classes="title")
                opt_status = gr.Markdown("—", elem_classes="badge")
                opt_tbl = gr.Dataframe(value=opt_df, interactive=False)

    # 下部：ダミー操作ボタン
    with gr.Row():
        run_btn = gr.Button("AI解析（ダミー）を表示", variant="primary")
        reset_btn = gr.Button("表示をリセット")

    # イベント（ダミー）
    run_btn.click(fn=simulate, outputs=[kpi_status, cg_status, data_status, opt_status])
    reset_btn.click(fn=reset, outputs=[kpi_status, cg_status, data_status, opt_status])

demo.launch(share=True)

